// Autogenerated from Pigeon (v1.0.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#if TARGET_OS_IOS
#import <Flutter/Flutter.h>
#else
#import <FlutterMacOS/FlutterMacOS.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
      @"code" : (error.code ? error.code : [NSNull null]),
      @"message" : (error.message ? error.message : [NSNull null]),
      @"details" : (error.details ? error.details : [NSNull null]),
    };
  }
  return @{
    @"result" : (result ? result : [NSNull null]),
    @"error" : errorDict,
  };
}

@interface OpenDataMessage ()
+ (OpenDataMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface OpenPathMessage ()
+ (OpenPathMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface OpenReply ()
+ (OpenReply *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdMessage ()
+ (IdMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface GetPageMessage ()
+ (GetPageMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface GetPageReply ()
+ (GetPageReply *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface RenderPageMessage ()
+ (RenderPageMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface RenderPageReply ()
+ (RenderPageReply *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface RegisterTextureReply ()
+ (RegisterTextureReply *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface UpdateTextureMessage ()
+ (UpdateTextureMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ResizeTextureMessage ()
+ (ResizeTextureMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface UnregisterTextureMessage ()
+ (UnregisterTextureMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation OpenDataMessage
+ (OpenDataMessage *)fromMap:(NSDictionary *)dict {
  OpenDataMessage *result = [[OpenDataMessage alloc] init];
  result.data = dict[@"data"];
  if ((NSNull *)result.data == [NSNull null]) {
    result.data = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.data ? self.data : [NSNull null]), @"data", nil];
}
@end

@implementation OpenPathMessage
+ (OpenPathMessage *)fromMap:(NSDictionary *)dict {
  OpenPathMessage *result = [[OpenPathMessage alloc] init];
  result.path = dict[@"path"];
  if ((NSNull *)result.path == [NSNull null]) {
    result.path = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.path ? self.path : [NSNull null]), @"path", nil];
}
@end

@implementation OpenReply
+ (OpenReply *)fromMap:(NSDictionary *)dict {
  OpenReply *result = [[OpenReply alloc] init];
  result.id = dict[@"id"];
  if ((NSNull *)result.id == [NSNull null]) {
    result.id = nil;
  }
  result.pagesCount = dict[@"pagesCount"];
  if ((NSNull *)result.pagesCount == [NSNull null]) {
    result.pagesCount = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id",
                                   (self.pagesCount ? self.pagesCount : [NSNull null]),
                                   @"pagesCount", nil];
}
@end

@implementation IdMessage
+ (IdMessage *)fromMap:(NSDictionary *)dict {
  IdMessage *result = [[IdMessage alloc] init];
  result.id = dict[@"id"];
  if ((NSNull *)result.id == [NSNull null]) {
    result.id = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return
      [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", nil];
}
@end

@implementation GetPageMessage
+ (GetPageMessage *)fromMap:(NSDictionary *)dict {
  GetPageMessage *result = [[GetPageMessage alloc] init];
  result.documentId = dict[@"documentId"];
  if ((NSNull *)result.documentId == [NSNull null]) {
    result.documentId = nil;
  }
  result.pageNumber = dict[@"pageNumber"];
  if ((NSNull *)result.pageNumber == [NSNull null]) {
    result.pageNumber = nil;
  }
  result.autoCloseAndroid = dict[@"autoCloseAndroid"];
  if ((NSNull *)result.autoCloseAndroid == [NSNull null]) {
    result.autoCloseAndroid = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.documentId ? self.documentId : [NSNull null]),
                                   @"documentId",
                                   (self.pageNumber ? self.pageNumber : [NSNull null]),
                                   @"pageNumber",
                                   (self.autoCloseAndroid ? self.autoCloseAndroid : [NSNull null]),
                                   @"autoCloseAndroid", nil];
}
@end

@implementation GetPageReply
+ (GetPageReply *)fromMap:(NSDictionary *)dict {
  GetPageReply *result = [[GetPageReply alloc] init];
  result.id = dict[@"id"];
  if ((NSNull *)result.id == [NSNull null]) {
    result.id = nil;
  }
  result.width = dict[@"width"];
  if ((NSNull *)result.width == [NSNull null]) {
    result.width = nil;
  }
  result.height = dict[@"height"];
  if ((NSNull *)result.height == [NSNull null]) {
    result.height = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id",
                                   (self.width ? self.width : [NSNull null]), @"width",
                                   (self.height ? self.height : [NSNull null]), @"height", nil];
}
@end

@implementation RenderPageMessage
+ (RenderPageMessage *)fromMap:(NSDictionary *)dict {
  RenderPageMessage *result = [[RenderPageMessage alloc] init];
  result.pageId = dict[@"pageId"];
  if ((NSNull *)result.pageId == [NSNull null]) {
    result.pageId = nil;
  }
  result.width = dict[@"width"];
  if ((NSNull *)result.width == [NSNull null]) {
    result.width = nil;
  }
  result.height = dict[@"height"];
  if ((NSNull *)result.height == [NSNull null]) {
    result.height = nil;
  }
  result.format = dict[@"format"];
  if ((NSNull *)result.format == [NSNull null]) {
    result.format = nil;
  }
  result.backgroundColor = dict[@"backgroundColor"];
  if ((NSNull *)result.backgroundColor == [NSNull null]) {
    result.backgroundColor = nil;
  }
  result.crop = dict[@"crop"];
  if ((NSNull *)result.crop == [NSNull null]) {
    result.crop = nil;
  }
  result.cropX = dict[@"cropX"];
  if ((NSNull *)result.cropX == [NSNull null]) {
    result.cropX = nil;
  }
  result.cropY = dict[@"cropY"];
  if ((NSNull *)result.cropY == [NSNull null]) {
    result.cropY = nil;
  }
  result.cropHeight = dict[@"cropHeight"];
  if ((NSNull *)result.cropHeight == [NSNull null]) {
    result.cropHeight = nil;
  }
  result.cropWidth = dict[@"cropWidth"];
  if ((NSNull *)result.cropWidth == [NSNull null]) {
    result.cropWidth = nil;
  }
  result.quality = dict[@"quality"];
  if ((NSNull *)result.quality == [NSNull null]) {
    result.quality = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.pageId ? self.pageId : [NSNull null]), @"pageId",
                                   (self.width ? self.width : [NSNull null]), @"width",
                                   (self.height ? self.height : [NSNull null]), @"height",
                                   (self.format ? self.format : [NSNull null]), @"format",
                                   (self.backgroundColor ? self.backgroundColor : [NSNull null]),
                                   @"backgroundColor", (self.crop ? self.crop : [NSNull null]),
                                   @"crop", (self.cropX ? self.cropX : [NSNull null]), @"cropX",
                                   (self.cropY ? self.cropY : [NSNull null]), @"cropY",
                                   (self.cropHeight ? self.cropHeight : [NSNull null]),
                                   @"cropHeight", (self.cropWidth ? self.cropWidth : [NSNull null]),
                                   @"cropWidth", (self.quality ? self.quality : [NSNull null]),
                                   @"quality", nil];
}
@end

@implementation RenderPageReply
+ (RenderPageReply *)fromMap:(NSDictionary *)dict {
  RenderPageReply *result = [[RenderPageReply alloc] init];
  result.width = dict[@"width"];
  if ((NSNull *)result.width == [NSNull null]) {
    result.width = nil;
  }
  result.height = dict[@"height"];
  if ((NSNull *)result.height == [NSNull null]) {
    result.height = nil;
  }
  result.path = dict[@"path"];
  if ((NSNull *)result.path == [NSNull null]) {
    result.path = nil;
  }
  result.data = dict[@"data"];
  if ((NSNull *)result.data == [NSNull null]) {
    result.data = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.width ? self.width : [NSNull null]), @"width",
                                   (self.height ? self.height : [NSNull null]), @"height",
                                   (self.path ? self.path : [NSNull null]), @"path",
                                   (self.data ? self.data : [NSNull null]), @"data", nil];
}
@end

@implementation RegisterTextureReply
+ (RegisterTextureReply *)fromMap:(NSDictionary *)dict {
  RegisterTextureReply *result = [[RegisterTextureReply alloc] init];
  result.id = dict[@"id"];
  if ((NSNull *)result.id == [NSNull null]) {
    result.id = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return
      [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", nil];
}
@end

@implementation UpdateTextureMessage
+ (UpdateTextureMessage *)fromMap:(NSDictionary *)dict {
  UpdateTextureMessage *result = [[UpdateTextureMessage alloc] init];
  result.documentId = dict[@"documentId"];
  if ((NSNull *)result.documentId == [NSNull null]) {
    result.documentId = nil;
  }
  result.pageNumber = dict[@"pageNumber"];
  if ((NSNull *)result.pageNumber == [NSNull null]) {
    result.pageNumber = nil;
  }
  result.pageId = dict[@"pageId"];
  if ((NSNull *)result.pageId == [NSNull null]) {
    result.pageId = nil;
  }
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.width = dict[@"width"];
  if ((NSNull *)result.width == [NSNull null]) {
    result.width = nil;
  }
  result.height = dict[@"height"];
  if ((NSNull *)result.height == [NSNull null]) {
    result.height = nil;
  }
  result.backgroundColor = dict[@"backgroundColor"];
  if ((NSNull *)result.backgroundColor == [NSNull null]) {
    result.backgroundColor = nil;
  }
  result.sourceX = dict[@"sourceX"];
  if ((NSNull *)result.sourceX == [NSNull null]) {
    result.sourceX = nil;
  }
  result.sourceY = dict[@"sourceY"];
  if ((NSNull *)result.sourceY == [NSNull null]) {
    result.sourceY = nil;
  }
  result.destinationX = dict[@"destinationX"];
  if ((NSNull *)result.destinationX == [NSNull null]) {
    result.destinationX = nil;
  }
  result.destinationY = dict[@"destinationY"];
  if ((NSNull *)result.destinationY == [NSNull null]) {
    result.destinationY = nil;
  }
  result.fullWidth = dict[@"fullWidth"];
  if ((NSNull *)result.fullWidth == [NSNull null]) {
    result.fullWidth = nil;
  }
  result.fullHeight = dict[@"fullHeight"];
  if ((NSNull *)result.fullHeight == [NSNull null]) {
    result.fullHeight = nil;
  }
  result.textureWidth = dict[@"textureWidth"];
  if ((NSNull *)result.textureWidth == [NSNull null]) {
    result.textureWidth = nil;
  }
  result.textureHeight = dict[@"textureHeight"];
  if ((NSNull *)result.textureHeight == [NSNull null]) {
    result.textureHeight = nil;
  }
  result.allowAntiAliasing = dict[@"allowAntiAliasing"];
  if ((NSNull *)result.allowAntiAliasing == [NSNull null]) {
    result.allowAntiAliasing = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.documentId ? self.documentId : [NSNull null]),
                                   @"documentId",
                                   (self.pageNumber ? self.pageNumber : [NSNull null]),
                                   @"pageNumber", (self.pageId ? self.pageId : [NSNull null]),
                                   @"pageId", (self.textureId ? self.textureId : [NSNull null]),
                                   @"textureId", (self.width ? self.width : [NSNull null]),
                                   @"width", (self.height ? self.height : [NSNull null]), @"height",
                                   (self.backgroundColor ? self.backgroundColor : [NSNull null]),
                                   @"backgroundColor",
                                   (self.sourceX ? self.sourceX : [NSNull null]), @"sourceX",
                                   (self.sourceY ? self.sourceY : [NSNull null]), @"sourceY",
                                   (self.destinationX ? self.destinationX : [NSNull null]),
                                   @"destinationX",
                                   (self.destinationY ? self.destinationY : [NSNull null]),
                                   @"destinationY",
                                   (self.fullWidth ? self.fullWidth : [NSNull null]), @"fullWidth",
                                   (self.fullHeight ? self.fullHeight : [NSNull null]),
                                   @"fullHeight",
                                   (self.textureWidth ? self.textureWidth : [NSNull null]),
                                   @"textureWidth",
                                   (self.textureHeight ? self.textureHeight : [NSNull null]),
                                   @"textureHeight",
                                   (self.allowAntiAliasing ? self.allowAntiAliasing
                                                           : [NSNull null]),
                                   @"allowAntiAliasing", nil];
}
@end

@implementation ResizeTextureMessage
+ (ResizeTextureMessage *)fromMap:(NSDictionary *)dict {
  ResizeTextureMessage *result = [[ResizeTextureMessage alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.width = dict[@"width"];
  if ((NSNull *)result.width == [NSNull null]) {
    result.width = nil;
  }
  result.height = dict[@"height"];
  if ((NSNull *)result.height == [NSNull null]) {
    result.height = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId",
                                   (self.width ? self.width : [NSNull null]), @"width",
                                   (self.height ? self.height : [NSNull null]), @"height", nil];
}
@end

@implementation UnregisterTextureMessage
+ (UnregisterTextureMessage *)fromMap:(NSDictionary *)dict {
  UnregisterTextureMessage *result = [[UnregisterTextureMessage alloc] init];
  result.id = dict[@"id"];
  if ((NSNull *)result.id == [NSNull null]) {
    result.id = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return
      [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", nil];
}
@end

@interface PdfRendererApiCodecReader : FlutterStandardReader
@end
@implementation PdfRendererApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [GetPageMessage fromMap:[self readValue]];

    case 129:
      return [GetPageReply fromMap:[self readValue]];

    case 130:
      return [IdMessage fromMap:[self readValue]];

    case 131:
      return [OpenDataMessage fromMap:[self readValue]];

    case 132:
      return [OpenPathMessage fromMap:[self readValue]];

    case 133:
      return [OpenReply fromMap:[self readValue]];

    case 134:
      return [RegisterTextureReply fromMap:[self readValue]];

    case 135:
      return [RenderPageMessage fromMap:[self readValue]];

    case 136:
      return [RenderPageReply fromMap:[self readValue]];

    case 137:
      return [ResizeTextureMessage fromMap:[self readValue]];

    case 138:
      return [UnregisterTextureMessage fromMap:[self readValue]];

    case 139:
      return [UpdateTextureMessage fromMap:[self readValue]];

    default:
      return [super readValueOfType:type];
  }
}
@end

@interface PdfRendererApiCodecWriter : FlutterStandardWriter
@end
@implementation PdfRendererApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[GetPageMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else if ([value isKindOfClass:[GetPageReply class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else if ([value isKindOfClass:[IdMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else if ([value isKindOfClass:[OpenDataMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else if ([value isKindOfClass:[OpenPathMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else if ([value isKindOfClass:[OpenReply class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else if ([value isKindOfClass:[RegisterTextureReply class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else if ([value isKindOfClass:[RenderPageMessage class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else if ([value isKindOfClass:[RenderPageReply class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else if ([value isKindOfClass:[ResizeTextureMessage class]]) {
    [self writeByte:137];
    [self writeValue:[value toMap]];
  } else if ([value isKindOfClass:[UnregisterTextureMessage class]]) {
    [self writeByte:138];
    [self writeValue:[value toMap]];
  } else if ([value isKindOfClass:[UpdateTextureMessage class]]) {
    [self writeByte:139];
    [self writeValue:[value toMap]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface PdfRendererApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PdfRendererApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PdfRendererApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PdfRendererApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PdfRendererApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    PdfRendererApiCodecReaderWriter *readerWriter = [[PdfRendererApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}

void PdfRendererApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                         NSObject<PdfRendererApi> *api) {
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PdfRendererApi.openDocumentData"
               binaryMessenger:binaryMessenger
                         codec:PdfRendererApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openDocumentDataMessage:completion:)],
                @"PdfRendererApi api (%@) doesn't respond to "
                @"@selector(openDocumentDataMessage:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        OpenDataMessage *arg_message = args[0];
        [api openDocumentDataMessage:arg_message
                          completion:^(OpenReply *_Nullable output, FlutterError *_Nullable error) {
                            callback(wrapResult(output, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PdfRendererApi.openDocumentFile"
               binaryMessenger:binaryMessenger
                         codec:PdfRendererApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openDocumentFileMessage:completion:)],
                @"PdfRendererApi api (%@) doesn't respond to "
                @"@selector(openDocumentFileMessage:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        OpenPathMessage *arg_message = args[0];
        [api openDocumentFileMessage:arg_message
                          completion:^(OpenReply *_Nullable output, FlutterError *_Nullable error) {
                            callback(wrapResult(output, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PdfRendererApi.openDocumentAsset"
               binaryMessenger:binaryMessenger
                         codec:PdfRendererApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openDocumentAssetMessage:completion:)],
                @"PdfRendererApi api (%@) doesn't respond to "
                @"@selector(openDocumentAssetMessage:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        OpenPathMessage *arg_message = args[0];
        [api
            openDocumentAssetMessage:arg_message
                          completion:^(OpenReply *_Nullable output, FlutterError *_Nullable error) {
                            callback(wrapResult(output, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PdfRendererApi.closeDocument"
               binaryMessenger:binaryMessenger
                         codec:PdfRendererApiGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(closeDocumentMessage:error:)],
          @"PdfRendererApi api (%@) doesn't respond to @selector(closeDocumentMessage:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IdMessage *arg_message = args[0];
        FlutterError *error;
        [api closeDocumentMessage:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PdfRendererApi.getPage"
               binaryMessenger:binaryMessenger
                         codec:PdfRendererApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPageMessage:completion:)],
                @"PdfRendererApi api (%@) doesn't respond to @selector(getPageMessage:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        GetPageMessage *arg_message = args[0];
        [api getPageMessage:arg_message
                 completion:^(GetPageReply *_Nullable output, FlutterError *_Nullable error) {
                   callback(wrapResult(output, error));
                 }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PdfRendererApi.renderPage"
               binaryMessenger:binaryMessenger
                         codec:PdfRendererApiGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(renderPageMessage:completion:)],
          @"PdfRendererApi api (%@) doesn't respond to @selector(renderPageMessage:completion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        RenderPageMessage *arg_message = args[0];
        [api renderPageMessage:arg_message
                    completion:^(RenderPageReply *_Nullable output, FlutterError *_Nullable error) {
                      callback(wrapResult(output, error));
                    }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PdfRendererApi.closePage"
               binaryMessenger:binaryMessenger
                         codec:PdfRendererApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(closePageMessage:error:)],
                @"PdfRendererApi api (%@) doesn't respond to @selector(closePageMessage:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IdMessage *arg_message = args[0];
        FlutterError *error;
        [api closePageMessage:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PdfRendererApi.registerTexture"
               binaryMessenger:binaryMessenger
                         codec:PdfRendererApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registerTextureWithError:)],
                @"PdfRendererApi api (%@) doesn't respond to @selector(registerTextureWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        RegisterTextureReply *output = [api registerTextureWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PdfRendererApi.updateTexture"
               binaryMessenger:binaryMessenger
                         codec:PdfRendererApiGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(updateTextureMessage:completion:)],
          @"PdfRendererApi api (%@) doesn't respond to @selector(updateTextureMessage:completion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        UpdateTextureMessage *arg_message = args[0];
        [api updateTextureMessage:arg_message
                       completion:^(FlutterError *_Nullable error) {
                         callback(wrapResult(nil, error));
                       }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PdfRendererApi.resizeTexture"
               binaryMessenger:binaryMessenger
                         codec:PdfRendererApiGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(resizeTextureMessage:completion:)],
          @"PdfRendererApi api (%@) doesn't respond to @selector(resizeTextureMessage:completion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ResizeTextureMessage *arg_message = args[0];
        [api resizeTextureMessage:arg_message
                       completion:^(FlutterError *_Nullable error) {
                         callback(wrapResult(nil, error));
                       }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PdfRendererApi.unregisterTexture"
               binaryMessenger:binaryMessenger
                         codec:PdfRendererApiGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(unregisterTextureMessage:error:)],
          @"PdfRendererApi api (%@) doesn't respond to @selector(unregisterTextureMessage:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        UnregisterTextureMessage *arg_message = args[0];
        FlutterError *error;
        [api unregisterTextureMessage:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
